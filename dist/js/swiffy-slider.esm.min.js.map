{
  "version": 3,
  "sources": ["../../src/swiffy-slider.esm.js"],
  "sourcesContent": ["export const swiffyslider = function() {\n    return {\n        version: \"1.6.0\",\n        init(rootElement = document.body) {\n            for (let sliderElement of rootElement.querySelectorAll(\".swiffy-slider\")) {\n                this.initSlider(sliderElement);\n            }\n        },\n\n        initSlider(sliderElement) {\n            for (let navElement of sliderElement.querySelectorAll(\".slider-nav\")) {\n                let next = navElement.classList.contains(\"slider-nav-next\");\n                navElement.addEventListener(\"click\", () => this.slide(sliderElement, next), { passive: true });\n            }\n            for (let indicatorElement of sliderElement.querySelectorAll(\".slider-indicators\")) {\n                indicatorElement.addEventListener(\"click\", () => this.slideToByIndicator());\n                this.onSlideEnd(sliderElement, () => this.handleIndicators(sliderElement), 60);\n            }\n            if (sliderElement.classList.contains(\"slider-nav-autoplay\")) {\n                const timeout = sliderElement.getAttribute(\"data-slider-nav-autoplay-interval\") ? sliderElement.getAttribute(\"data-slider-nav-autoplay-interval\") : 2500;\n                this.autoPlay(sliderElement, timeout, sliderElement.classList.contains(\"slider-nav-autopause\"));\n            }\n            if ([\"slider-nav-autohide\", \"slider-nav-animation\"].some(className => sliderElement.classList.contains(className))) {\n                const threshold = sliderElement.getAttribute(\"data-slider-nav-animation-threshold\") ? sliderElement.getAttribute(\"data-slider-nav-animation-threshold\") : 0.3;\n                this.setVisibleSlides(sliderElement, threshold);\n            }\n        },\n\n        setVisibleSlides(sliderElement, threshold = 0.3) {\n            let observer = new IntersectionObserver(slides => {\n                slides.forEach(slide => {\n                    slide.isIntersecting ? slide.target.classList.add(\"slide-visible\") : slide.target.classList.remove(\"slide-visible\");\n                });\n                sliderElement.querySelector(\".slider-container>*:first-child\").classList.contains(\"slide-visible\") ? sliderElement.classList.add(\"slider-item-first-visible\") : sliderElement.classList.remove(\"slider-item-first-visible\");\n                sliderElement.querySelector(\".slider-container>*:last-child\").classList.contains(\"slide-visible\") ? sliderElement.classList.add(\"slider-item-last-visible\") : sliderElement.classList.remove(\"slider-item-last-visible\");\n            }, {\n                root: sliderElement.querySelector(\".slider-container\"),\n                threshold: threshold\n            });\n            for (let slide of sliderElement.querySelectorAll(\".slider-container>*\"))\n                observer.observe(slide);\n        },\n\n        slide(sliderElement, next = true) {\n            const container = sliderElement.querySelector(\".slider-container\");\n            const fullpage = sliderElement.classList.contains(\"slider-nav-page\");\n            const noloop = sliderElement.classList.contains(\"slider-nav-noloop\");\n            const nodelay = sliderElement.classList.contains(\"slider-nav-nodelay\");\n            const slides = container.children;\n            const gapWidth = parseInt(window.getComputedStyle(container).columnGap);\n            const scrollStep = slides[0].offsetWidth + gapWidth;\n            let scrollLeftPosition = next ?\n                container.scrollLeft + scrollStep :\n                container.scrollLeft - scrollStep;\n            if (fullpage) {\n                scrollLeftPosition = next ?\n                    container.scrollLeft + container.offsetWidth :\n                    container.scrollLeft - container.offsetWidth;\n            }\n            if (container.scrollLeft < 1 && !next && !noloop) {\n                scrollLeftPosition = (container.scrollWidth - container.offsetWidth);\n            }\n            if (container.scrollLeft >= (container.scrollWidth - container.offsetWidth) && next && !noloop) {\n                scrollLeftPosition = 0;\n            }\n            container.scroll({\n                left: scrollLeftPosition,\n                behavior: nodelay ? \"auto\" : \"smooth\"\n            });\n        },\n\n        slideToByIndicator() {\n            const indicator = window.event.target;\n            const indicatorIndex = Array.from(indicator.parentElement.children).indexOf(indicator);\n            const indicatorCount = indicator.parentElement.children.length;\n            const sliderElement = indicator.closest(\".swiffy-slider\");\n            const slideCount = sliderElement.querySelector(\".slider-container\").children.length;\n            const relativeSlideIndex = (slideCount / indicatorCount) * indicatorIndex;\n            this.slideTo(sliderElement, relativeSlideIndex);\n        },\n\n        slideTo(sliderElement, slideIndex) {\n            const container = sliderElement.querySelector(\".slider-container\");\n            const gapWidth = parseInt(window.getComputedStyle(container).columnGap);\n            const scrollStep = container.children[0].offsetWidth + gapWidth;\n            const nodelay = sliderElement.classList.contains(\"slider-nav-nodelay\");\n            container.scroll({\n                left: (scrollStep * slideIndex),\n                behavior: nodelay ? \"auto\" : \"smooth\"\n            });\n        },\n\n        onSlideEnd(sliderElement, delegate, timeout = 125) {\n            let isScrolling;\n            sliderElement.querySelector(\".slider-container\").addEventListener(\"scroll\", function() {\n                window.clearTimeout(isScrolling);\n                isScrolling = setTimeout(delegate, timeout);\n            }, { capture: false, passive: true });\n        },\n\n        autoPlay(sliderElement, timeout, autopause) {\n            timeout = timeout < 750 ? 750 : timeout;\n            let autoplayTimer = setInterval(() => this.slide(sliderElement), timeout);\n            const autoplayer = () => {\n                [\"mouseout\", \"touchend\"].forEach(function(event) {\n                    sliderElement.removeEventListener(event, autoplayer);\n                });\n\n                this.autoPlay(sliderElement, timeout, autopause);\n            }\n            if (autopause) {\n                [\"mouseover\", \"touchstart\"].forEach(function(event) {\n                    sliderElement.addEventListener(event, function() {\n                        window.clearTimeout(autoplayTimer);\n                    }, { once: true, passive: true });\n                });\n                [\"mouseout\", \"touchend\"].forEach(function(event) {\n                    sliderElement.addEventListener(event, autoplayer, { once: true, passive: true });\n                });\n            }\n            return autoplayTimer;\n        },\n\n        handleIndicators(sliderElement) {\n            if (!sliderElement) return;\n            const container = sliderElement.querySelector(\".slider-container\");\n            const slidingAreaWidth = container.scrollWidth - container.offsetWidth;\n            const percentSlide = (container.scrollLeft / slidingAreaWidth);\n            for (let scrollIndicatorContainers of sliderElement.querySelectorAll(\".slider-indicators\")) {\n                let scrollIndicators = scrollIndicatorContainers.children;\n                let activeIndicator = Math.abs(Math.round((scrollIndicators.length - 1) * percentSlide));\n                for (let element of scrollIndicators)\n                    element.classList.remove(\"active\");\n                scrollIndicators[activeIndicator].classList.add(\"active\");\n            }\n        }\n    };\n}();"],
  "mappings": "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",
  "names": ["swiffyslider", "rootElement", "sliderElement", "navElement", "next", "indicatorElement", "timeout", "className", "threshold", "observer", "slides", "slide", "container", "fullpage", "noloop", "nodelay", "gapWidth", "scrollStep", "scrollLeftPosition", "indicator", "indicatorIndex", "indicatorCount", "relativeSlideIndex", "slideIndex", "delegate", "isScrolling", "autopause", "autoplayTimer", "autoplayer", "event", "slidingAreaWidth", "percentSlide", "scrollIndicatorContainers", "scrollIndicators", "activeIndicator", "element"]
}
